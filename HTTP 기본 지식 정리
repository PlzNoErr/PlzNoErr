IP
인터넷 프로토콜 역할
• 지정한 IP 주소(IP Address)에 데이터 전달
• 패킷(Packet)이라는 통신 단위로 데이터 전달


IP 프로토콜의 한계
 - 비연결성
• 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송(IP 프로토콜은 대상 서버가 패킷을 받을 수 있는 상태인지 모름 - 전원이 꺼져있어도 전송)
 - 비신뢰성
• 중간에 패킷이 사라지면? (걸국 여러 서버들을 거쳐가는거라 중간에 뭔일이 일어날지 알수가 없음)
• 패킷이 보낸 순서대로 안오면? (보낼 데이터의 크기가 클 경우 패킷을 쪼개서 보내게 되는데 회선따라 다른 노드를 타게되는 경우가 있음. 도착지점에 누가 먼저 올지는 몰?루)
 - 프로그램 구분
• 같은 IP를 사용하는 서버에서 통신하는 애플리케이션이 둘 이상이면?

---------------------------------------------------------------------------------------
 " TCP/UDP "
<!--"인터넷 프로토콜 스택의 4계층"-->
 애플리케이션 계층 - HTTP, FTP
 전송 계층 - TCP, UDP
 인터넷 계층 - IP
 네트워크 인터페이스 계층
  ===> 각각의 계층을 거치면서 데이터에 필요한 계층들을 포장시켜서 패킷을 만듬.
 
 
 TCP 특징
전송 제어 프로토콜(Transmission Control Protocol)
• 연결지향 - "TCP 3 way handshake" (가상 연결 => 가상으로 한번 연결해서 받을 준비가 되어 있는지 상태를 본다)
• 데이터 전달 보증 (데이터 전송을 잘 받았는지 응답을 서버에서 같이 담아서 답장해 줌)
• 순서 보장 (패킷 순서가 다르게 도착하면 재대로 안 온 순서부터 다시 보내라고 서버가 재응답 함)
• 신뢰할 수 있는 프로토콜
• 현재는 대부분 TCP 사용

---------------------------------------------------------------------------------------
-- TCP 3 way handshake
클라이언트 - 서버간 상호 교신

==> 중간에 거치는 수많으 서버들과 노드들이 어떤지는 모른다.
==> 그냥 목적지에 보내 봤고 응답이 왔다는 것을 확인한 것. 전용 통로 같은 것은 없다.

클라이언트ㅣ   =>   SYN       ㅣ 서버
          ㅣ     SYN, ACK  <= ㅣ
          ㅣ   =>   ACK       ㅣ

* SYN: 접속 요청
* ACK: 요청 수락
---------------------------------------------------------------------------------------

 UDP 특징
 -사용자 데이터그램 프로토콜(User Datagram Protocol)
• 하얀 도화지에 비유(기능이 거의 없음)
• 연결지향 - TCP 3 way handshake X
• 데이터 전달 보증 X
• 순서 보장 X
• !!!! 데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠름 !!!! => TCP는 신뢰성을 위해 이것저것 사전작업을 많이해서 상대적으로 느리다.
• 정리
• IP와 거의 같다. <+PORT> <+체크섬(간단한 검증)> 정도만 추가
• 애플리케이션에서 추가 작업 필요
---------------------------------------------------------------------------------------

<!-- 포트(PORT) -->
 목적지 서버를 찾아가기 위해 "IP" 가 필요. 그럼 그 서버안에서 이제 누가 한 요청인지 식별하기 위해서는 "PORT" 활용
   • 0 ~ 65535 할당 가능
     • 0 ~ 1023: 잘 알려진 포트, 사용하지 않는 것이 좋음
     • FTP - 20, 21
     • TELNET - 23
     • HTTP - 80
     • HTTPS - 443
     
<!-- DNS(도메인 네임 시스템(Domain Name System)  EX) google, naver, kakao...) --> 
 IP는 기억하기 어렵다 + IP는 변경될 수 있다
 => 도메인 명을 IP 주소로 변환(DNS서버에 IP를 등록해 놓고 만약 서비스 과정에서 IP가 바뀔일이 있다면 해당 서버에 등록된 주소를 UPDATE 해줌)
 => 클라이언트가 어디에 접속하고 싶다면 DNS를 가지고 도메인 서버에 접속해서 IP의 값을 받아온 뒤 그 주소로 요청을 보냄.
 
 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
<!-- URI -->
  • Uniform: 리소스 식별하는 통일된 방식
  • Resource: 자원, URI로 식별할 수 있는 모든 것(제한 없음)
  • Identifier: 다른 항목과 구분하는데 필요한 정보
  => URI >> URL, URN

  • URL: Uniform Resource Locator
  • URN: Uniform Resource Name
 
///////////////////////////////////
URL

foo://example.com:8042/over/there?name=ferret#nose 
 \_/ \______________/\_________/ \_________/ \__/ 
 | | | | | 
 scheme authority path query fragment 
 | _____________________|__ 
 / \ / \ 
 urn:example:animal:ferret:nose
 
 URN (그냥 이런게 있다.)
 ///////////////////////////////////
 
 ==> 지금은 그냥 URL만 쓴다. 따라서 URI = URL로 봐도 무방
 
---------------------------------------------------------------------------------------
 URL의 문법

• scheme://[userinfo@]host[:port][/path][?query][#fragment]
• https://www.google.com:443/search?q=hello&hl=ko
       ㅣ
       \/
• scheme: //[userinfo@ => 유저의 사용자 정보 인증시 사용 거의 안씀] host[:port]           [/path]  [?query]       [#fragment : html 내부북마크에서 사용, 서버로 전송X]
•  https: //                                                       www.google.com:443    /search   ?q=hello&hl=ko

• 프로토콜(https)
• 호스트명(www.google.com)
• 포트 번호(443)
• 패스(/search)
• 쿼리 파라미터(q=hello&hl=ko)
---------------------------------------------------------------------------------------
 웹 브라우저의 요청 흐름
 어플리케이션에서 HTTP 요청 메세지 작성 = > OS에서 TCP/IP 소켓을 씌워서 포장함 => 서버로 날림
 서버에서는 도착한 TCP/IP 소켓을 까서 버림. HTTP메세지만 해석해서 적합한 응답을 구성함. 구성한 HTTP 응답에 마찬가지로 TCP/IP소켓으로 포장함 => 클라이언트에게 날림
 클라이언트도 마찬가지로 돌아온 응답에서 TCP/IP소켓을 까서 버림. 그리고 남은 HTTP응답을 구성해서 UI에 출력





 
 
 
